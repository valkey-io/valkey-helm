{{- if and .Values.auth.enabled .Values.auth.generateDefaultUser.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ include "valkey.fullname" . }}-auth
  labels:
    {{- include "valkey.labels" . | nindent 4 }}
type: Opaque
data:
  {{- $password := .Values.auth.generateDefaultUser.password }}
  {{- if not $password }}
    {{- $existingSecret := (lookup "v1" "Secret" .Release.Namespace (printf "%s-auth" (include "valkey.fullname" .))) }}
    {{- if and $existingSecret $existingSecret.data $existingSecret.data.password }}
      {{- $password = ($existingSecret.data.password | b64dec) }}
    {{- else }}
      {{- $password = randAlphaNum 32 }}
    {{- end }}
  {{- end }}
  password: {{ $password | b64enc | quote }}
  users.acl: {{ printf "user %s on >%s %s" .Values.auth.generateDefaultUser.username $password .Values.auth.generateDefaultUser.permissions | b64enc | quote }}
{{- end }}
