{{- include "valkey.validateMode" . }}
{{- if .Values.sentinel.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "valkey.fullname" . }}
  labels:
    {{- include "valkey.labels" . | nindent 4 }}
    app.kubernetes.io/component: valkey
spec:
  serviceName: {{ include "valkey.fullname" . }}-headless
  replicas: {{ .Values.replicaCount }}
  {{- if .Values.updateStrategy }}
  updateStrategy:
    {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "valkey.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: valkey
  template:
    metadata:
      labels:
        {{- include "valkey.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: valkey
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/init-scripts: {{ include (print $.Template.BasePath "/init_config.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      automountServiceAccountToken: {{ .Values.serviceAccount.automount }}
      serviceAccountName: {{ include "valkey.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- if .Values.replication.antiAffinity.enabled }}
      affinity:
        podAntiAffinity:
          {{- if eq .Values.replication.antiAffinity.type "hard" }}
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: {{ .Values.replication.antiAffinity.topologyKey }}
              labelSelector:
                matchLabels:
                  {{- include "valkey.selectorLabels" . | nindent 18 }}
                  app.kubernetes.io/component: valkey
          {{- else }}
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                topologyKey: {{ .Values.replication.antiAffinity.topologyKey }}
                labelSelector:
                  matchLabels:
                    {{- include "valkey.selectorLabels" . | nindent 20 }}
                    app.kubernetes.io/component: valkey
          {{- end }}
        {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- else }}
        {{- with .Values.affinity }}
        affinity:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: init-valkey
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command: ["/bin/bash", "/scripts/init-valkey.sh"]
          {{- if .Values.env }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: init-scripts
              mountPath: /scripts
            - name: valkey-base-config
              mountPath: /config-base
            {{- if .Values.auth.enabled }}
            {{- if .Values.auth.existingSecret }}
            - name: valkey-password
              mountPath: /secrets
              readOnly: true
            {{- end }}
            {{- end }}
            {{- if .Values.tls.enabled }}
            - name: valkey-tls
              mountPath: /tls
              readOnly: true
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.initResources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- with .Values.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
        - name: valkey
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          command:
            - valkey-server
            - /data/valkey.conf
          ports:
            - name: tcp
              containerPort: 6379
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: tcp
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - valkey-cli ping
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          {{- if .Values.env }}
          env:
            {{- range $key, $value := .Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          volumeMounts:
            - name: data
              mountPath: /data
            {{- if .Values.tls.enabled }}
            - name: valkey-tls
              mountPath: /tls
              readOnly: true
            {{- end }}
            {{- range .Values.extraValkeyConfigs }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              {{- if .defaultMode }}
              defaultMode: {{ .defaultMode }}
              {{- end }}
            {{- end }}
            {{- range .Values.extraValkeySecrets }}
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: true
              {{- if .defaultMode }}
              defaultMode: {{ .defaultMode }}
              {{- end }}
            {{- end }}
            {{- with .Values.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- if .Values.metrics.enabled }}
        - name: metrics
          image: "{{ .Values.metrics.exporter.image.repository }}:{{ .Values.metrics.exporter.image.tag }}"
          imagePullPolicy: {{ .Values.metrics.exporter.image.pullPolicy }}
          ports:
            - name: metrics
              containerPort: 9121
              protocol: TCP
          env:
            - name: REDIS_ADDR
              value: "redis://localhost:6379"
            {{- if .Values.auth.enabled }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.auth.existingSecret }}
                  name: {{ .Values.auth.existingSecret }}
                  key: {{ .Values.auth.existingSecretPasswordKey }}
                  {{- else }}
                  name: {{ include "valkey.fullname" . }}-auth
                  key: password
                  {{- end }}
            {{- end }}
          {{- range .Values.metrics.exporter.extraExporterSecrets }}
          volumeMounts:
            - name: {{ .name }}
              mountPath: {{ .mountPath }}
              readOnly: true
          {{- end }}
          {{- with .Values.metrics.exporter.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      volumes:
        - name: init-scripts
          configMap:
            name: {{ include "valkey.fullname" . }}-init-scripts
            defaultMode: 0755
        - name: valkey-base-config
          configMap:
            name: {{ include "valkey.fullname" . }}-valkey-base-config
        {{- if .Values.auth.enabled }}
        {{- if .Values.auth.existingSecret }}
        - name: valkey-password
          secret:
            secretName: {{ .Values.auth.existingSecret }}
        {{- end }}
        {{- end }}
        {{- if .Values.tls.enabled }}
        - name: valkey-tls
          secret:
            secretName: {{ .Values.tls.certificatesSecret }}
        {{- end }}
        {{- range .Values.extraValkeyConfigs }}
        - name: {{ .name }}
          configMap:
            name: {{ .name }}
        {{- end }}
        {{- range .Values.extraValkeySecrets }}
        - name: {{ .name }}
          secret:
            secretName: {{ .name }}
        {{- end }}
        {{- range .Values.metrics.exporter.extraExporterSecrets }}
        - name: {{ .name }}
          secret:
            secretName: {{ .name }}
        {{- end }}
        {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
  {{- if and .Values.dataStorage.enabled .Values.dataStorage.requestedSize }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- with .Values.dataStorage.annotations }}
        annotations:
          {{- toYaml . | nindent 10 }}
        {{- end }}
        {{- with .Values.dataStorage.labels }}
        labels:
          {{- toYaml . | nindent 10 }}
        {{- end }}
      spec:
        accessModes:
          {{- toYaml .Values.dataStorage.accessModes | nindent 10 }}
        {{- if .Values.dataStorage.className }}
        storageClassName: {{ .Values.dataStorage.className }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.dataStorage.requestedSize }}
  {{- else }}
        - name: data
          emptyDir: {}
  {{- end }}
{{- end }}
