# Number of Valkey pods to run
replicaCount: 1

image:
  # Valkey Docker image to use
  repository: docker.io/valkey/valkey
  # Image pull policy (Always, IfNotPresent, Never)
  pullPolicy: IfNotPresent
  # Image tag (leave empty to use .Chart.AppVersion)
  tag: ""

# List of image pull secrets (for private registries)
imagePullSecrets: []

# Override the default name or full name of resources
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Create a service account for Valkey
  create: true
  # Whether to automount the service account token
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # Name of an existing service account to use (if create: false)
  name: ""

# Annotations and labels for the pods
podAnnotations: {}
podLabels: {}

# Security context for the pod (applies to all containers)
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000

# Security context for the Valkey containers
securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  # Type of Kubernetes service (ClusterIP, NodePort, LoadBalancer)
  type: ClusterIP
  # Port on which Valkey will be exposed
  port: 6379

# Network policy to control traffic to the pods
# More info: https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy: {}

# Resource limits/requests for the main Valkey container
resources: {}
  # Example:
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Resource limits/requests for init containers
initResources: {}
  # Example:
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Persistent storage configuration
dataStorage:
  # Enable persistent volume claim creation
  enabled: false

  # Use existing PVC by name (skip dynamic provisioning if set)
  persistentVolumeClaimName: ""

  # Name of the volume (referenced in deployment)
  volumeName: "valkey-data"

  # Request size (e.g. 5Gi) for dynamically provisioned volume
  requestedSize: ""

  # Name of the storage class to use
  className: ""

  # Access modes for the PVC (e.g., ReadWriteOnce, ReadWriteMany)
  accessModes:
    - ReadWriteOnce

  # If true, keep the PVC on Helm uninstall
  keepPvc: false

  # Optional annotations to add to the PVC
  annotations: {}

  # Optional labels to add to the PVC
  labels: {}

# Mount additional secrets into the Valkey container
extraValkeySecrets: []

# Mount additional configMaps into the Valkey container
extraValkeyConfigs: []

# Mount extra secrets as volume to init container (deprecated, use extraValkeySecrets)
extraSecretValkeyConfigs: false

# Mount additional emptyDir or hostPath volumes (advanced use)
extraStorage: []

# Content for valkey.conf (will be mounted via ConfigMap)
valkeyConfig: ""

auth:
  # Enable ACL-based authentication
  enabled: false

  # Default ACL rules (used only if auth.enabled is true)
  aclConfig: |
    # Users and permissions can be defined here
    # Example:
    # user default off
    # user default on >defaultpassword ~*  &* +@all 

# Node selector for pod assignment
nodeSelector: {}

# Tolerations for pod assignment to tainted nodes
tolerations: []

# Affinity rules for pod scheduling
affinity: {}

# See https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints
topologySpreadConstraints: {}

# Valkey logging level: debug, verbose, notice, warning
valkeyLogLevel: "notice"

# Environment variables to inject into Valkey container
env: {}
  # Example:
  # LOG_LEVEL: info