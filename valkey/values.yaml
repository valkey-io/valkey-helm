# Number of Valkey pods to run
replicaCount: 1

image:
  # Valkey Docker image to use
  repository: docker.io/valkey/valkey
  # Image pull policy (Always, IfNotPresent, Never)
  pullPolicy: IfNotPresent
  # Image tag (leave empty to use .Chart.AppVersion)
  tag: ""

# List of image pull secrets (for private registries)
imagePullSecrets: []

# Override the default name or full name of resources
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Create a service account for Valkey
  create: true
  # Whether to automount the service account token
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # Name of an existing service account to use (if create: false)
  name: ""

# Annotations and labels for the pods
podAnnotations: {}
podLabels: {}

# Security context for the pod (applies to all containers)
podSecurityContext:
  fsGroup: 1000
  runAsUser: 1000
  runAsGroup: 1000

# Security context for the Valkey containers
securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

service:
  # Type of Kubernetes service (ClusterIP, NodePort, LoadBalancer)
  type: ClusterIP
  # Port on which Valkey will be exposed
  port: 6379

# Network policy to control traffic to the pods
# More info: https://kubernetes.io/docs/concepts/services-networking/network-policies/
networkPolicy: {}

# Ingress configuration
# More info: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # Example:
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

# Resource limits/requests for the main Valkey container
resources: {}
  # Example:
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Resource limits/requests for init containers
initResources: {}
  # Example:
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Persistent storage configuration
dataStorage:
  # Enable persistent volume claim creation
  enabled: false

  # Use existing PVC by name (skip dynamic provisioning if set)
  persistentVolumeClaimName: ""

  # Name of the volume (referenced in deployment)
  volumeName: "valkey-data"

  # Request size (e.g. 5Gi) for dynamically provisioned volume
  requestedSize: ""

  # Name of the storage class to use
  className: ""

  # Access modes for the PVC (e.g., ReadWriteOnce, ReadWriteMany)
  accessModes:
    - ReadWriteOnce

  # If true, keep the PVC on Helm uninstall
  keepPvc: false

  # Optional annotations to add to the PVC
  annotations: {}

  # Optional labels to add to the PVC
  labels: {}

# Mount additional secrets into the Valkey container
extraValkeySecrets: []

# Mount additional configMaps into the Valkey container
extraValkeyConfigs: []

# Mount extra secrets as volume to init container (deprecated, use extraValkeySecrets)
extraSecretValkeyConfigs: false

# Mount additional emptyDir or hostPath volumes (advanced use)
extraStorage: []

# Content for valkey.conf (will be mounted via ConfigMap)
valkeyConfig: ""

auth:
  # Enable ACL-based authentication
  enabled: false

  # IMPORTANT: Choose ONE of the following three configuration methods:
  # Priority order (if multiple are enabled):
  #   1. generateDefaultUser (highest priority)
  #   2. existingSecret
  #   3. aclConfig (lowest priority, inline configuration)
  #
  # WARNING: Only enable ONE method. Enabling multiple methods simultaneously
  # may lead to unexpected behavior as generateDefaultUser takes precedence.

  # Method 1: Generate a default user with random password
  # This automatically creates a Kubernetes Secret with a random password
  # Best for: Quick setup, development, testing
  generateDefaultUser:
    enabled: false
    # Username for the generated default user
    username: "default"
    # Optional: Specify a password (if empty, one will be generated)
    password: ""
    # ACL permissions for the default user
    permissions: "~* &* +@all"

  # Method 2: Use an existing secret containing ACL configuration
  # The secret must have a key named 'users.acl' with ACL rules
  # Best for: Production, GitOps workflows, external secret management
  # Example: existingSecret: "my-valkey-auth-secret"
  existingSecret: ""

  # Method 3: Inline ACL configuration (used only if the above two are not enabled)
  # Best for: Simple deployments, version-controlled configurations
  aclConfig: |
    # Users and permissions can be defined here
    # Example:
    # user default off
    # user default on >defaultpassword ~*  &* +@all

# Node selector for pod assignment
nodeSelector: {}

# Tolerations for pod assignment to tainted nodes
tolerations: []

# Affinity rules for pod scheduling
affinity: {}

# Valkey logging level: debug, verbose, notice, warning
valkeyLogLevel: "notice"

metrics:
  # Enable Prometheus exporter sidecar
  enabled: false

  exporter:
    # Additional secrets to mount for metrics exporter
    extraExporterSecrets: []

# Environment variables to inject into Valkey container
env: {}
  # Example:
  # LOG_LEVEL: info

